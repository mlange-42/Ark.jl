var documenterSearchIndex = {"docs":
[{"location":"api.html#API","page":"Public API","title":"API","text":"","category":"section"},{"location":"api.html","page":"Public API","title":"Public API","text":"Ark's public API.","category":"page"},{"location":"api.html","page":"Public API","title":"Public API","text":"Pages = [\"api.md\"]\nDepth = 2:2","category":"page"},{"location":"api.html#World","page":"Public API","title":"World","text":"","category":"section"},{"location":"api.html","page":"Public API","title":"Public API","text":"The World is the central data storage for Entities, Components and Resources.","category":"page"},{"location":"api.html#Ark.World","page":"Public API","title":"Ark.World","text":"World{CS<:Tuple,CT<:Tuple,N}\n\nThe World is the central ECS storage.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Ark.is_locked","page":"Public API","title":"Ark.is_locked","text":"is_locked(world::World)::Bool\n\nReturns whether the world is currently locked for modifications.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Map","page":"Public API","title":"Map","text":"","category":"section"},{"location":"api.html","page":"Public API","title":"Public API","text":"Maps allow access and manipulation capabilities for entities. Note that the same capabilities are also accessible through the World, but the maps API may be more ergonomic in some cases. See also the Components-related API.","category":"page"},{"location":"api.html#Ark.Map","page":"Public API","title":"Ark.Map","text":"Map{CS, N}\n\nA component mapper for N components.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Ark.@Map","page":"Public API","title":"Ark.@Map","text":"@Map(world::World, comp_types::Tuple)\n\nMacro version of Map for ergonomic construction of component mappers.\n\nArguments\n\nworld: The World instance to map components from.\ncomp_types::Tuple: A tuple of component types, e.g. (Position, Velocity).\n\nExample\n\n@Map(world, (Position, Velocity))\n\n\n\n\n\n","category":"macro"},{"location":"api.html#Base.getindex-Tuple{Map, Entity}","page":"Public API","title":"Base.getindex","text":"Base.getindex(map::Map, entity::Entity)\n\nGet the Map's components for an Entity.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Base.setindex!-Tuple{Map, Tuple, Entity}","page":"Public API","title":"Base.setindex!","text":"Base.setindex!(map::Map, values::Tuple, entity::Entity)\n\nSets the values of the Map's components for an Entity. The entity must already have all these components.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Entities","page":"Public API","title":"Entities","text":"","category":"section"},{"location":"api.html","page":"Public API","title":"Public API","text":"Entities are the \"game objects\" or \"model entities\". An entity if just an ID with a generation, but Components can be attached to an entity.","category":"page"},{"location":"api.html#Ark.Entity","page":"Public API","title":"Ark.Entity","text":"Entity\n\nEntity identifier.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Ark.zero_entity","page":"Public API","title":"Ark.zero_entity","text":"const zero_entity::Entity\n\nThe reserved zero Entity value.\n\n\n\n\n\n","category":"constant"},{"location":"api.html#Ark.new_entity!","page":"Public API","title":"Ark.new_entity!","text":"new_entity!(world::World, values::Tuple)::Entity\n\nCreates a new Entity with the given component values. Types are inferred from the values.\n\n\n\n\n\nnew_entity!(map::Map, comps::Tuple)::Entity\n\nCreates a new Entity with length(comps) components.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Ark.new_entities!","page":"Public API","title":"Ark.new_entities!","text":"new_entities!(world::World, n::Int, defaults::Tuple; iterate::Bool=false)::Union{Batch,Nothing}\n\nCreates the given number of Entity, initialized with default values. Component types are inferred from the provided default values.\n\nIf iterate is true, a Batch iterator over the newly created entities is returned that can be used for initialization.\n\nArguments\n\nworld::World: The World instance to use.\nn::Int: The number of entities to create.\ndefaults::Tuple: A tuple of default values for initialization, like (Position(0, 0), Velocity(1, 1)).\niterate::Bool: Whether to return a batch for individual entity initialization.\n\n\n\n\n\nnew_entities!(world::World, n::Int, comp_types::Tuple{Vararg{Val}})::Batch\n\nCreates the given number of Entity.\n\nReturns a Batch iterator over the newly created entities that should be used to initialize components. Note that components are not initialized/undef unless set in the iterator!\n\nFor a more convenient tuple syntax, the macro @new_entities! is provided.\n\nArguments\n\nworld::World: The World instance to use.\nn::Int: The number of entities to create.\ncomp_types::Tuple: Component types for the new entities, like Val.((Position, Velocity)).\n\n\n\n\n\n","category":"function"},{"location":"api.html#Ark.@new_entities!","page":"Public API","title":"Ark.@new_entities!","text":"@new_entities!(world::World, n::Int, comp_types::Tuple{Vararg{Val}})::Batch\n\nCreates the given number of Entity.\n\nReturns a Batch iterator over the newly created entities that should be used to initialize components. Note that components are not initialized/undef unless set in the iterator.\n\nMacro version of new_entities! for ergonomic construction of component mappers.\n\nArguments\n\nworld::World: The World instance to use.\nn::Int: The number of entities to create.\ncomp_types::Tuple: Component types for the new entities, like (Position, Velocity).\n\n\n\n\n\n","category":"macro"},{"location":"api.html#Ark.remove_entity!","page":"Public API","title":"Ark.remove_entity!","text":"remove_entity!(world::World, entity::Entity)\n\nRemoves an Entity from the World.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Ark.is_alive","page":"Public API","title":"Ark.is_alive","text":"is_alive(world::World, entity::Entity)::Bool\n\nReturns whether an Entity is alive.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Ark.is_zero","page":"Public API","title":"Ark.is_zero","text":"is_zero(entity::Entity)::Bool\n\nReturns whether an Entity is the zero entity.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Components","page":"Public API","title":"Components","text":"","category":"section"},{"location":"api.html","page":"Public API","title":"Public API","text":"Components contain the data associated with Entities","category":"page"},{"location":"api.html#Ark.get_components","page":"Public API","title":"Ark.get_components","text":"get_components(world::World, entity::Entity, comp_types::Tuple)\n\nGet the given components for an Entity.\n\nFor a more convenient tuple syntax, the macro @get_components is provided.\n\nExample\n\npos, vel = get_components(world, entity, Val.((Position, Velocity)))\n\n\n\n\n\n","category":"function"},{"location":"api.html#Ark.@get_components","page":"Public API","title":"Ark.@get_components","text":"@get_components(world::World, entity::Entity, comp_types::Tuple)\n\nGet the given components for an Entity.\n\nMacro version of get_components for more ergonomic component type tuples.\n\nExample\n\npos, vel = @get_components(world, entity, (Position, Velocity))\n\n\n\n\n\n","category":"macro"},{"location":"api.html#Ark.has_components","page":"Public API","title":"Ark.has_components","text":"has_components(world::World, entity::Entity, comp_types::Tuple)\n\nReturns whether an Entity has all given components.\n\nFor a more convenient tuple syntax, the macro @has_components is provided.\n\nExample\n\nhas = has_components(world, entity, Val.((Position, Velocity)))\n\n\n\n\n\nhas_components(map::Map, entity::Entity)\n\nReturns whether an Entity has all the Map's components.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Ark.@has_components","page":"Public API","title":"Ark.@has_components","text":"@has_components(world::World, entity::Entity, comp_types::Tuple)\n\nReturns whether an Entity has all given components.\n\nMacro version of has_components for more ergonomic component type tuples.\n\nExample\n\nhas = @has_components(world, entity, (Position, Velocity))\n\n\n\n\n\n","category":"macro"},{"location":"api.html#Ark.set_components!","page":"Public API","title":"Ark.set_components!","text":"set_components!(world::World, entity::Entity, values::Tuple)\n\nSets the given component values for an Entity. Types are inferred from the values. The entity must already have all these components.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Ark.add_components!","page":"Public API","title":"Ark.add_components!","text":"add_components!(world::World, entity::Entity, values::Tuple)\n\nAdds the given component values to an Entity. Types are inferred from the values.\n\n\n\n\n\nadd_components!(map::Map, entity::Entity, value::Tuple)\n\nAdds the values of the Map's components to an Entity.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Ark.remove_components!","page":"Public API","title":"Ark.remove_components!","text":"remove_components!(world::World, entity::Entity, comp_types::Tuple)\n\nRemoves the given components from an Entity.\n\nFor a more convenient tuple syntax, the macro @remove_components! is provided.\n\nExample\n\nremove_components!(world, entity, Val.((Position, Velocity)))\n\n\n\n\n\nremove_components!(map::Map, entity::Entity)\n\nRemoves the Map's components from an Entity.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Ark.@remove_components!","page":"Public API","title":"Ark.@remove_components!","text":"@remove_components!(world::World, entity::Entity, comp_types::Tuple)\n\nRemoves the given components from an Entity.\n\nMacro version of remove_components! for ergonomic construction of component mappers.\n\nExample\n\n@remove_components!(world, entity, (Position, Velocity))\n\n\n\n\n\n","category":"macro"},{"location":"api.html#Ark.exchange_components!","page":"Public API","title":"Ark.exchange_components!","text":"exchange_components!(world::World{CS,CT,N}, entity::Entity; add::Tuple, remove::Tuple)\n\nAdds and removes components on an Entity. Types are inferred from the add values.\n\nFor a more convenient tuple syntax, the macro @exchange_components! is provided.\n\nExample\n\nexchange_components!(world, entity;\n    add=(Health(100),),\n    remove=Val.((Position, Velocity)),\n)\n\n\n\n\n\n","category":"function"},{"location":"api.html#Ark.@exchange_components!","page":"Public API","title":"Ark.@exchange_components!","text":"@exchange_components!(world::World, entity::Entity, add::Tuple, remove::Tuple)\n\nRemoves the given components from an Entity.\n\nMacro version of exchange_components! for more ergonomic component type tuples.\n\nExample\n\n@exchange_components!(world, entity,\n    add=(Health(100),),\n    remove=Val.((Position, Velocity)),\n)\n\n\n\n\n\n","category":"macro"},{"location":"api.html#Queries","page":"Public API","title":"Queries","text":"","category":"section"},{"location":"api.html","page":"Public API","title":"Public API","text":"Queries are used to filter and process Entities with a certain set of Components.","category":"page"},{"location":"api.html#Ark.Query","page":"Public API","title":"Ark.Query","text":"Query\n\nA query for components.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Ark.@Query","page":"Public API","title":"Ark.@Query","text":"@Query(\n    world::World,\n    comp_types::Tuple,\n    with::Tuple=(),\n    without::Tuple=(),\n    optional::Tuple=()\n)\n\nCreates a query.\n\nMacro version of Query that allows ergonomic construction of queries using simulated keyword arguments.\n\nQueries can be stored and re-used. However, query creation is fast (<20ns), so this is mandatory.\n\nArguments\n\nworld: The World instance to query.\ncomp_types::Tuple: Components the query filters for and provides access to. Must be a literal tuple like (Position, Velocity).\nwith::Tuple: Additional components the entities must have. Passed as with=(Health,).\nwithout::Tuple: Components the entities must not have. Passed as without=(Altitude,).\noptional::Tuple: Components that are optional in the query. Passed as optional=(Velocity,).\n\nExample\n\nfor (entities, pos_column, vel_column) in @Query(world, (Position, Velocity))\n    for i in eachindex(entities)\n        pos = pos_column[i]\n        vel = vel_column[i]\n        pos_column[i] = Position(pos.x + vel.dx, pos.y + vel.dy)\n    end\nend\n\n\n\n\n\n","category":"macro"},{"location":"api.html#Ark.close!-Union{Tuple{Query{W, CS}}, Tuple{CS}, Tuple{W}} where {W<:World, CS<:Tuple}","page":"Public API","title":"Ark.close!","text":"close!(q::Query)\n\nCloses the query and unlocks the world.\n\nMust be called if a query is not fully iterated.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Ark.Entities","page":"Public API","title":"Ark.Entities","text":"Entities\n\nArchetype column for entities. Can be iterated and indexed like a Vector.\n\nUsed in query iteration.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Resources","page":"Public API","title":"Resources","text":"","category":"section"},{"location":"api.html","page":"Public API","title":"Public API","text":"Resources are singleton-like data structures that appear only once in a World and are not associated to an Entities.","category":"page"},{"location":"api.html#Ark.get_resource","page":"Public API","title":"Ark.get_resource","text":"get_resource(world::World, res_type::Type{T})\n\nGet the resource of type T from the world.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Ark.has_resource","page":"Public API","title":"Ark.has_resource","text":"has_resource(world::World, res_type::Type{T})\n\nCheck if a resource of type T is in the world.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Ark.add_resource!","page":"Public API","title":"Ark.add_resource!","text":"add_resource!(world::World, res::T)\n\nAdd the given resource to the world.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Ark.remove_resource!","page":"Public API","title":"Ark.remove_resource!","text":"remove_resource!(world::World, res_type::Type{T})\n\nRemove the resource of type T from the world.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Batch","page":"Public API","title":"Batch","text":"","category":"section"},{"location":"api.html#Ark.Batch","page":"Public API","title":"Ark.Batch","text":"Batch\n\nA batch iterator. This is returned from batch operations and serves for initializing newly added components.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Ark.close!-Union{Tuple{Batch{W, CS}}, Tuple{CS}, Tuple{W}} where {W<:World, CS<:Tuple}","page":"Public API","title":"Ark.close!","text":"close!(b::Batch)\n\nCloses the batch iterator and unlocks the world.\n\nMust be called if a batch is not fully iterated.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Index","page":"Public API","title":"Index","text":"","category":"section"},{"location":"api.html","page":"Public API","title":"Public API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"_internal.html#Suppress-warnings-for-documented-private-members","page":"Suppress warnings for documented private members","title":"Suppress warnings for documented private members","text":"","category":"section"},{"location":"_internal.html#Ark._Column","page":"Suppress warnings for documented private members","title":"Ark._Column","text":"_Column{C}\n\nArchetype column storing one type of components. Can be iterated, indexed and updated like a Vector.\n\nUsed in query iteration.\n\n\n\n\n\n","category":"type"},{"location":"manual/index.html#TODO...","page":"TODO...","title":"TODO...","text":"","category":"section"},{"location":"index.html#Ark.jl","page":"Home","title":"Ark.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation for Ark.","category":"page"}]
}
